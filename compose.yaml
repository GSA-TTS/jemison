x-minio-common: &minio-common
  image: minio/minio:latest
  command: server --console-address ":9101" http://minio{1...2}/data{1...2}
  expose:
    - "9100"
    - "9101"
  environment:
    MINIO_ROOT_USER: numbernine
    MINIO_ROOT_PASSWORD: numbernine
  healthcheck:
    test: ["CMD", "mc", "ready", "local"]
    interval: 5s
    timeout: 5s
    retries: 5

# Error response from daemon: invalid restart policy: unknown policy 'never'; use one of 'no', 'always', 'on-failure', or 'unless-stopped'
x-services-common: &services-common
  restart: no

services:
  # NEXT SERVICE PORT: 10009
  #-----------------------------------------------------
  # admin :10001
  #-----------------------------------------------------
  admin:
    <<: *services-common
    image: jemison/dev
    # Simulate CF
    # https://stackoverflow.com/questions/42345235/how-to-specify-memory-cpu-limit-in-docker-compose-version-3
    deploy:
      resources:
        limits:
          memory: 128m
    build: 
      context: .
      dockerfile: ./cmd/admin/Dockerfile
    entrypoint: /home/vcap/app/cmd/admin/service.exe
    volumes:
      - type: bind
        source: .
        target: /home/vcap/app
    ports:
      - 10001:8888
    # https://docs.docker.com/compose/how-tos/startup-order/
    depends_on:
      nginx:
        condition: service_started
      jemison-queues-db:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://admin:8888/heartbeat || exit 1
      interval: 60s
      timeout: 180s
      retries: 3
      start_period: 60s
    environment:
      ENV: "DOCKER"
      PORT: 8888
      DEBUG_LEVEL: debug
      GIN_MODE: debug


  #-----------------------------------------------------
  # entree :10007
  #-----------------------------------------------------
  entree:
    <<: *services-common
    image: jemison/dev
    # Simulate CF
    # https://stackoverflow.com/questions/42345235/how-to-specify-memory-cpu-limit-in-docker-compose-version-3
    deploy:
      resources:
        limits:
          memory: 64m
    build: 
      context: .
      dockerfile: ./cmd/entree/Dockerfile
    entrypoint: /home/vcap/app/cmd/entree/run.sh
    volumes:
      - type: bind
        source: .
        target: /home/vcap/app
    ports:
      - 10007:8888
    # https://docs.docker.com/compose/how-tos/startup-order/
    depends_on:
      nginx:
        condition: service_started
      jemison-queues-db:
        condition: service_healthy
      jemison-work-db:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://entree:8888/heartbeat || exit 1
      interval: 60s
      timeout: 180s
      retries: 3
      start_period: 60s
    environment:
      ENV: "DOCKER"
      PORT: 8888
      DEBUG_LEVEL: debug
      GIN_MODE: debug
      SCHEDULE: ${SCHEDULE:-""}

  #-----------------------------------------------------
  # extract :10002
  #-----------------------------------------------------
  extract:
    <<: *services-common
    image: jemison/dev
    # Simulate CF
    # https://stackoverflow.com/questions/42345235/how-to-specify-memory-cpu-limit-in-docker-compose-version-3
    deploy:
      resources:
        limits:
          memory: 4096M
    build: 
      context: .
      dockerfile: ./cmd/extract/Dockerfile
    entrypoint: /home/vcap/app/cmd/extract/service.exe
    volumes:
      - type: bind
        source: .
        target: /home/vcap/app
    ports:
      - 10002:8888
    # https://docs.docker.com/compose/how-tos/startup-order/
    depends_on:
      nginx:
        condition: service_started
      jemison-queues-db:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://extract:8888/heartbeat || exit 1
      interval: 60s
      timeout: 180s
      retries: 3
      start_period: 60s
    environment:
      ENV: "DOCKER"
      PORT: 8888
      DEBUG_LEVEL: debug
      GIN_MODE: debug

  #-----------------------------------------------------
  # fetch :10003
  #-----------------------------------------------------
  fetch:
    <<: *services-common
    image: jemison/dev
    deploy:
      resources:
        limits:
          memory: 236M
    build: 
      context: .
      dockerfile: ./cmd/fetch/Dockerfile
    entrypoint: /home/vcap/app/cmd/fetch/service.exe
    volumes:
      - type: bind
        source: .
        target: /app
    ports:
      - 10003:8888
    # https://docs.docker.com/compose/how-tos/startup-order/
    depends_on:
      nginx:
        condition: service_started
      jemison-queues-db:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://fetch:8888/heartbeat || exit 1
      interval: 60s
      timeout: 180s
      retries: 3
      start_period: 60s
    environment:
      ENV: "DOCKER"
      PORT: 8888
      API_KEY: lego
      DEBUG_LEVEL: debug
      GIN_MODE: release
      SCHEDULE: ${SCHEDULE:-""}

  #-----------------------------------------------------
  # pack :10004
  #-----------------------------------------------------
  pack:
    <<: *services-common
    image: jemison/dev
    #privileged: true
    build: 
      context: .
      dockerfile: ./cmd/pack/Dockerfile
    entrypoint: /home/vcap/app/cmd/pack/run.sh
    volumes:
      - type: bind
        source: .
        target: /home/vcap/app
    ports:
      - 10004:8888
    # https://docs.docker.com/compose/how-tos/startup-order/
    depends_on:
      nginx:
        condition: service_started
      jemison-queues-db:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://pack:8888/heartbeat || exit 1
      interval: 60s
      timeout: 180s
      retries: 3
      start_period: 60s
    environment:
      ENV: "DOCKER"
      DEBUG_LEVEL: "debug"
      GIN_MODE: debug
      PORT: 8888
      SCHEDULE: ${SCHEDULE:-""}

  #-----------------------------------------------------
  # serve :10000
  #-----------------------------------------------------
  serve:
    <<: *services-common
    image: jemison/dev
    build: 
      context: .
      dockerfile: ./cmd/serve/Dockerfile
    deploy:
      resources:
        limits:
          memory: 512M
    ulimits:
      nofile:
          soft: 65536
          hard: 65536
    entrypoint: /home/vcap/app/cmd/serve/service.exe
    volumes:
      - type: bind
        source: .
        target: /home/vcap/app
    ports:
      - 10000:8888
    # https://docs.docker.com/compose/how-tos/startup-order/
    depends_on:
      nginx:
        condition: service_started
      jemison-queues-db:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://serve:8888/api/heartbeat || exit 1
      interval: 60s
      timeout: 180s
      retries: 3
      start_period: 60s
    environment:
      ENV: "DOCKER"
      DEBUG_LEVEL: "warn"
      PORT: 8888
      GIN_MODE: release

#-----------------------------------------------------
# resultsapi :10008
#-----------------------------------------------------
  resultsapi:
    <<: *services-common
    image: jemison/dev
    build: 
      context: .
      dockerfile: ./cmd/resultsapi/Dockerfile
    deploy:
      resources:
        limits:
          memory: 512M
    ulimits:
      nofile:
          soft: 65536
          hard: 65536
    entrypoint: /home/vcap/app/cmd/resultsapi/service.exe
    volumes:
      - type: bind
        source: .
        target: /home/vcap/app
    ports:
      - 10008:8888
    # https://docs.docker.com/compose/how-tos/startup-order/
    depends_on:
      nginx:
        condition: service_started
      jemison-queues-db:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://resultsapi:8888/api/heartbeat || exit 1
      interval: 60s
      timeout: 180s
      retries: 3
      start_period: 60s
    environment:
      ENV: "DOCKER"
      DEBUG_LEVEL: "warn"
      PORT: 8888
      GIN_MODE: release

  # #-----------------------------------------------------
  # # validate :10005
  # #-----------------------------------------------------
  # validate:
  #   image: jemison/dev
  #   build: 
  #     context: .
  #     dockerfile: ./cmd/validate/Dockerfile
  #   entrypoint: /home/vcap/app/cmd/validate/service.exe
  #   volumes:
  #     - type: bind
  #       source: .
  #       target: /home/vcap/app
  #   ports:
  #     - 10005:8888
  #   # https://docs.docker.com/compose/how-tos/startup-order/
  #   depends_on:
  #     nginx:
  #       condition: service_started
  #     jemison-queues-db:
  #       condition: service_healthy
  #   healthcheck:
  #     test: curl --fail http://validate:8888/heartbeat || exit 1
  #     interval: 60s
  #     timeout: 180s
  #     retries: 3
  #     start_period: 60s
  #   environment:
  #     ENV: "DOCKER"
  #     PORT: 8888
  #     DEBUG_LEVEL: debug
  #     GIN_MODE: debug
  #   restart: always

  #-----------------------------------------------------
  # walk :10006
  #-----------------------------------------------------
  walk:
    <<: *services-common
    image: jemison/dev
    build: 
      context: .
      dockerfile: ./cmd/walk/Dockerfile
    entrypoint: /home/vcap/app/cmd/walk/service.exe
    volumes:
      - type: bind
        source: .
        target: /home/vcap/app
    ports:
      - 10006:8888
    # https://docs.docker.com/compose/how-tos/startup-order/
    depends_on:
      nginx:
        condition: service_started
      jemison-queues-db:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://walk:8888/heartbeat || exit 1
      interval: 60s
      timeout: 180s
      retries: 3
      start_period: 60s
    environment:
      ENV: "DOCKER"
      PORT: 8888
      DEBUG_LEVEL: debug
      GIN_MODE: debug

  #-----------------------------------------------------
  # river queue watcher :11111
  #-----------------------------------------------------
  ui:
    image: ghcr.io/riverqueue/riverui:latest
    ports:
      - 11111:8080
    environment:
      DATABASE_URL: postgresql://postgres@jemison-queues-db:5432/postgres
      RIVER_LOG_LEVEL: ERROR
      RIVER_DEBUG: 0
    depends_on:
      jemison-queues-db:
        condition: service_healthy

  #-----------------------------------------------------
  # postgres common
  #-----------------------------------------------------
  x-pg-common: &pg-common
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      POSTGRES_HOST_AUTH_METHOD: "trust"
    healthcheck:
      # test: ["CMD-SHELL", "pg_isready", "-d", "postgres", "-U", "postgres"]
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s  

  #-----------------------------------------------------
  # postgres/jemison-queues-db :5432
  #-----------------------------------------------------
  jemison-queues-db:
    <<: *pg-common
    ports:
      - 5432:5432
    volumes:
      - jemison-queues-db-vol:/var/lib/postgresql/data

  #-----------------------------------------------------
  # postgres/jemison-work-db :6543
  #-----------------------------------------------------
  jemison-work-db:
    <<: *pg-common
    ports:
      - 6543:5432
    volumes:
      - jemison-work-db-vol:/var/lib/postgresql/data

  #-----------------------------------------------------
  # search jemison-search-db :7654
  #-----------------------------------------------------
  jemison-search-db:
    <<: *pg-common
    ports:
      - 7654:5432
    volumes:
      - jemison-search-db-vol:/var/lib/postgresql/data


  #-----------------------------------------------------
  # minio :9001
  #-----------------------------------------------------
  minio1:
    <<: *minio-common
    hostname: minio1
    volumes:
      - data1-1:/data1
      - data1-2:/data2

  minio2:
    <<: *minio-common
    hostname: minio2
    volumes:
      - data2-1:/data1
      - data2-2:/data2

  nginx:
    image: nginx:1.19.2-alpine
    hostname: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9100:9100"
      - "9101:9101"
    depends_on:
      - minio1
      - minio2
    healthcheck:
      test: ["CMD-SHELL", "wget -O /dev/null http://localhost || exit 1"]
      timeout: 10s

  #-----------------------------------------------------
  # pgweb :22222
  #-----------------------------------------------------
  pgweb:
    image: sosedoff/pgweb
    container_name: pgweb 
    restart: always
    ports: 
      - 22222:8081
    environment:
      PGWEB_DATABASE_URL: postgresql://postgres@jemison-queues-db:5432/postgres?sslmode=disable
    depends_on:
      jemison-queues-db:
        condition: service_healthy

  #-----------------------------------------------------
  # pgweb:6543
  #-----------------------------------------------------
  pgweb2:
    image: sosedoff/pgweb
    container_name: pgweb2
    restart: always
    ports: 
      - 22223:8081
    environment:
      PGWEB_DATABASE_URL: postgresql://postgres@jemison-work-db:5432/postgres?sslmode=disable
    depends_on:
      jemison-work-db:
        condition: service_healthy

  #-----------------------------------------------------
  # test.gov :11112
  #-----------------------------------------------------
  # This is a python on-liner that serves up the complete
  # works of Sherlock Holmes. It serves as a pathological
  # crawling target for local testing.
  # test.gov:
  #   image: jemison/dev
  #   container_name: test.gov
  #   restart: always
  #   ports: 
  #     - 11112:80
  #   entrypoint: python3 -m http.server 80 --directory /home/vcap/app/testing/sherlock/sherlock-holm.es
  #   volumes:
  #     - type: bind
  #       source: .
  #       target: /home/vcap/app
  #   external_links:
  #     - test.gov:t2.gov
  #   networks:
  #     default:
  #       aliases:
  #         - t1.gov
  #         - t2.gov
  #         - t3.gov
  
volumes:
  jemison-queues-db-vol:
  jemison-work-db-vol:
  jemison-search-db-vol:
  data1-1:
  data1-2:
  data2-1:
  data2-2:
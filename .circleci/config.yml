# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

jobs:
  lint:
    # We could build against the cflinux4 image.
    # However, we'll try using the default Ubuntu image, 
    # but we could run into libc compatibility problems.
    # https://hub.docker.com/r/cloudfoundry/cflinuxfs4/tags
    # - image: cloudfoundry/cflinuxfs4:latest
    # We'll try a go image. That may, or may not,
    # build a binary that plays well with CF/CGov.
    docker: &gobase
      - image: cimg/go:1.23.3
    steps:
      - checkout
      - run: &common-installs
          name: "common installs"
          command: |
            sudo apt-get update
            sudo apt-get -y install build-essential \
              curl \
              libpoppler-dev \
              libpoppler-glib-dev \
              poppler-utils \
              software-properties-common \
              tree \
              wget
      - run: |
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh
            sh -s -- -b /usr/local/go/bin v1.63.4
      - run: golangci-lint run

  setup-and-build:
    docker: *gobase
    steps:
      # Checkout the code as the first step.
      - checkout
      - run: *common-installs
      - run:
          name: "Installing packages"
          command: "echo installing packages..."

      - run: |
            wget https://downloads.sqlc.dev/sqlc_1.27.0_linux_amd64.tar.gz
            tar xvzf sqlc_1.27.0_linux_amd64.tar.gz
            chmod 755 sqlc
            sudo mv sqlc /bin/sqlc
      - run: |
            go install golang.org/x/tools/cmd/goimports@latest
            go install golang.org/x/tools/cmd/stringer@latest
            go install github.com/google/go-jsonnet/cmd/jsonnet@latest
            go install github.com/google/go-jsonnet/cmd/jsonnet-lint@latest
            go install github.com/google/go-jsonnet/cmd/jsonnetfmt@latest

      - run: make build


  # build:
  #   docker:
  #     - image: cimg/go:1.23.3
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Building"
  #         command: "echo building..."
  #     - run: make build

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  build-and-deploy:
    jobs:
      - lint
      - setup-and-build:
          requires: [ lint ]
version: 2.1

commands:
  apt-packages:
    description: Performs a common install in each job
    steps:
      - run:
          name: "common apt packages"
          command: |
            sudo apt-get update
            sudo apt-get -y install build-essential \
              curl \
              libpoppler-dev \
              libpoppler-glib-dev \
              poppler-utils \
              software-properties-common \
              tree \
              wget
  install-linter:
    description: Installs the golangci linter
    parameters:
      linter-version: 
        default: 1.63.4
        type: string
    steps:
      - run:
          name: "install golangci-lint"
          command: |
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v<< parameters.linter-version >>
  install-go-utilities:
    description: Installs the golang utilities
    steps:
      - run: 
          name: "install jsonnet"
          command: |
            go install golang.org/x/tools/cmd/goimports@latest
            go install golang.org/x/tools/cmd/stringer@latest
            go install github.com/google/go-jsonnet/cmd/jsonnet@latest
            go install github.com/google/go-jsonnet/cmd/jsonnet-lint@latest
            go install github.com/google/go-jsonnet/cmd/jsonnetfmt@latest
      - run: 
          name: "install sqlc"
          command: |
            wget https://downloads.sqlc.dev/sqlc_1.27.0_linux_amd64.tar.gz
            tar xvzf sqlc_1.27.0_linux_amd64.tar.gz
            chmod 755 sqlc
            sudo mv sqlc /bin/sqlc
  prep-the-build:
    description: Generates files required for the build
    steps:
      - run:
          name: "generate sqlc models"
          command: make generate

jobs:
  lint:
    docker:
      - image: cimg/go:1.23.3
    steps:
      - checkout
      - apt-packages
      - install-go-utilities
      - install-linter
      - prep-the-build
      - run: 
          name: "find the lint"
          command: golangci-lint run -v
          no_output_timeout: 5m

  setup-and-build:
    docker:
      - image: cimg/go:1.23.3
    steps:
      - checkout
      - apt-packages
      - install-go-utilities
      - run: make build

  deploy-to-cloud-gov:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: "Install Cloud Foundry CLI"
          command: |
            wget -q -O cf-cli.tgz "https://packages.cloudfoundry.org/stable?release=linux64-binary&source=github"
            tar -xzf cf-cli.tgz
            sudo mv cf /usr/local/bin/cf
      - run:
          name: "Authenticate to Cloud.gov"
          command: |
            cf api https://api.fr.cloud.gov
            cf auth "$CLOUD_GOV_USERNAME" "$CLOUD_GOV_PASSWORD"
      - run:
          name: "Target the correct org and space"
          command: cf target -o "$CLOUD_GOV_ORG" -s "$CLOUD_GOV_SPACE"
      - run:
          name: "Deploy to Cloud.gov"
          command: cf push -f manifest-dev.yml

  local-docker-run:
    docker:
      - image: cimg/base:stable
      - image: docker:24.0.5
        name: docker
    steps:
      - setup_remote_docker:
          version: 24.0.5
      - checkout
      - run:
          name: "Build Docker Images"
          command: make docker
      - run:
          name: "Run Application Locally (Docker Compose)"
          command: make up

workflows:
  build-and-deploy:
    jobs:
      - lint
      - setup-and-build:
          requires: [ lint ]
      - local-docker-run:
          requires: [ setup-and-build ]
      - deploy-to-cloud-gov:
          requires: [ setup-and-build ]

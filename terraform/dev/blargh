# We must define the space in each subdirectory.
# /dev maps to the `dev` space, etc.
variable cf_space {
  default = "search-dev"
}

variable databases {
  type = map(object({rds_plan_name = string}))
  default = {
    queuesdb = {
      rds_plan_name = "micro-psql"
    },
    searchdb = {
      rds_plan_name = "micro-psql"
    },
    workdb = {
      rds_plan_name = "micro-psql"
    },
  }
}

variable services {
  type = map(object({disk = number, ram = number}))
  default = {
    admin = { 
      disk = local.disk_quota["small"], 
      ram = local.ram_quota["medium"] 
      },
    entree = { 
      disk = local.disk_quota["small"], 
      ram = local.ram_quota["medium"] 
      },
    extract = { 
      disk = local.disk_quota["small"], 
      ram = local.ram_quota["medium"] 
      },
    fetch = { 
      disk = local.disk_quota["small"], 
      ram = local.ram_quota["medium"] 
      },
    pack = { 
      disk = local.disk_quota["small"], 
      ram = local.ram_quota["medium"] 
      },
    serve = { 
      disk = local.disk_quota["small"], 
      ram = local.ram_quota["medium"] 
      },
    walk = { 
      disk = local.disk_quota["small"], 
      ram = local.ram_quota["medium"] 
      },
  }
}


#################################################################
# ENTREE
#################################################################

resource "cloudfoundry_app" "entree" {
  name                 = "entree"
  space                = data.cloudfoundry_space.app_space.id
  buildpacks            = ["https://github.com/cloudfoundry/apt-buildpack", "https://github.com/cloudfoundry/binary-buildpack.git"]
  path                 = "zips/entree.zip"
  source_code_hash     = filesha256("zips/entree.zip")
  disk_quota           = var.services["entree"].disk
  memory               = var.services["entree"].ram
  instances            = 1
  strategy             = "rolling"
  timeout              = 200
  health_check_type    = "port"
  health_check_timeout = 180
  health_check_http_endpoint = "/api/heartbeat"

  service_binding {
    service_instance = module.workdb.instance_id
  }

  service_binding {
    service_instance = module.queuesdb.instance_id
  }

  environment = {
    ENV = "SANDBOX"
    API_KEY = "${var.api_key}"
    GIN_MODE = "${var.gin_debug_level}"
  }
}

#################################################################
# FETCH
#################################################################


resource "cloudfoundry_app" "fetch" {
  name                 = "fetch"
  space                = data.cloudfoundry_space.app_space.id
  buildpacks            = ["https://github.com/cloudfoundry/apt-buildpack", "https://github.com/cloudfoundry/binary-buildpack.git"]
  path                 = "zips/fetch.zip"
  source_code_hash     = filesha256("zips/fetch.zip")
  disk_quota           = var.services["fetch"].disk
  memory               = var.services["fetch"].ram
  instances            = 1
  strategy             = "rolling"
  timeout              = 200
  health_check_type    = "port"
  health_check_timeout = 180
  health_check_http_endpoint = "/api/heartbeat"
    service_binding {
    service_instance = module.s3-private-fetch.bucket_id
  }

  service_binding {
    service_instance = module.queuesdb.instance_id
  }

  environment = {
    ENV = "SANDBOX"
    GIN_MODE = "${var.gin_debug_level}"
  }
}

#################################################################
# EXTRACT
#################################################################
resource "cloudfoundry_app" "extract" {
  name                 = "extract"
  space                = data.cloudfoundry_space.app_space.id
  buildpacks            = ["https://github.com/cloudfoundry/apt-buildpack", "https://github.com/cloudfoundry/binary-buildpack.git"]
  path                 = "zips/extract.zip"
  source_code_hash     = filesha256("zips/extract.zip")
  disk_quota           = var.services["extract"].disk
  memory               = var.services["extract"].ram
  instances            = 1
  strategy             = "rolling"
  timeout              = 200
  health_check_type    = "port"
  health_check_timeout = 180
  health_check_http_endpoint = "/api/heartbeat"
  service_binding {
    service_instance = module.s3-private-extract.bucket_id
  }
  service_binding {
    service_instance = module.s3-private-fetch.bucket_id
  }
  service_binding {
    service_instance = module.queuesdb.instance_id
  }

  environment = {
    ENV = "SANDBOX"
    API_KEY = "${var.api_key}"
    GIN_MODE = "${var.gin_debug_level}"
  }
}

#################################################################
# PACK
#################################################################

resource "cloudfoundry_app" "pack" {
  name                 = "pack"
  space                = data.cloudfoundry_space.app_space.id
  buildpacks            = ["https://github.com/cloudfoundry/apt-buildpack", "https://github.com/cloudfoundry/binary-buildpack.git"]
  path                 = "zips/pack.zip"
  source_code_hash     = filesha256("zips/pack.zip")
  disk_quota           = var.services["pack"].disk
  memory               = var.services["pack"].ram
  instances            = 1
  strategy             = "rolling"
  timeout              = 200
  health_check_type    = "port"
  health_check_timeout = 180
  health_check_http_endpoint = "/api/heartbeat"
  service_binding {
    service_instance = module.s3-private-extract.bucket_id
  }
  service_binding {
    service_instance = module.s3-private-serve.bucket_id
  }

  service_binding {
    service_instance = module.queuesdb.instance_id
  }

  environment = {
    ENV = "SANDBOX"
    API_KEY = "${var.api_key}"
    GIN_MODE = "${var.gin_debug_level}"
  }
}


#################################################################
# SERVE
#################################################################

resource "cloudfoundry_route" "serve_route" {
  space    = data.cloudfoundry_space.app_space.id
  domain   = data.cloudfoundry_domain.public.id
  hostname = "jemison"
}
resource "cloudfoundry_app" "serve" {
  name                 = "serve"
  space                = data.cloudfoundry_space.app_space.id
  buildpacks            = ["https://github.com/cloudfoundry/apt-buildpack", "https://github.com/cloudfoundry/binary-buildpack.git"]
  path                 = "zips/serve.zip"
  source_code_hash     = filesha256("zips/serve.zip")
  disk_quota           = var.services["serve"].disk
  memory               = var.services["serve"].ram
  instances            = 1
  strategy             = "rolling"
  timeout              = 200
  health_check_type    = "port"
  health_check_timeout = 180
  health_check_http_endpoint = "/api/heartbeat"
    service_binding {
    service_instance = module.s3-private-fetch.bucket_id
  }
  service_binding {
    service_instance = module.s3-private-serve.bucket_id
  }
  service_binding {
    service_instance = module.queuesdb.instance_id
  }

  routes {
    route = cloudfoundry_route.serve_route.id
  }

  environment = {
    ENV = "SANDBOX"
    API_KEY = "${var.api_key}"
    GIN_MODE = "${var.gin_debug_level}"
  }
}

#################################################################
# WALK
#################################################################

resource "cloudfoundry_app" "walk" {
  name                 = "walk"
  space                = data.cloudfoundry_space.app_space.id
  buildpacks            = ["https://github.com/cloudfoundry/apt-buildpack", "https://github.com/cloudfoundry/binary-buildpack.git"]
  path                 = "zips/walk.zip"
  source_code_hash     = filesha256("zips/walk.zip")
  disk_quota           = var.services["walk"].disk
  memory               = var.services["walk"].ram
  instances            = 1
  strategy             = "rolling"
  timeout              = 200
  health_check_type    = "port"
  health_check_timeout = 180
  health_check_http_endpoint = "/api/heartbeat"
  service_binding {
    service_instance = module.s3-private-fetch.bucket_id
  }

  service_binding {
    service_instance = module.queuesdb.instance_id
  }

  environment = {
    ENV = "SANDBOX"
    API_KEY = "${var.api_key}"
    GIN_MODE = "${var.gin_debug_level}"
  }
}
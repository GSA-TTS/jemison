// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package search_db

import (
	"context"
)

const countSiteIndex = `-- name: CountSiteIndex :one
SELECT count(*) FROM paths
`

func (q *Queries) CountSiteIndex(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countSiteIndex)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertBody = `-- name: InsertBody :one
INSERT INTO bodies
    (path_id, kind, tag, body)
    VALUES
    ($1, 2, $2, $3)
    RETURNING id
`

type InsertBodyParams struct {
	PathID int32  `json:"path_id"`
	Tag    string `json:"tag"`
	Body   string `json:"body"`
}

func (q *Queries) InsertBody(ctx context.Context, arg InsertBodyParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertBody, arg.PathID, arg.Tag, arg.Body)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertHeader = `-- name: InsertHeader :one
INSERT INTO headers
    (path_id, kind, level, header)
    VALUES ($1, 1, $2, $3)
    RETURNING id
`

type InsertHeaderParams struct {
	PathID int32  `json:"path_id"`
	Level  int32  `json:"level"`
	Header string `json:"header"`
}

func (q *Queries) InsertHeader(ctx context.Context, arg InsertHeaderParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertHeader, arg.PathID, arg.Level, arg.Header)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertPath = `-- name: InsertPath :one
INSERT INTO paths (path)
    SELECT $1
    WHERE NOT EXISTS (
        SELECT id, path
        FROM paths
        WHERE path = $1
    )
    RETURNING id
`

// As we are building an index over a page, the first thing
// that needs to happen is we insert a unique reference
// in the path table.
func (q *Queries) InsertPath(ctx context.Context, path string) (int64, error) {
	row := q.db.QueryRow(ctx, insertPath, path)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertTitle = `-- name: InsertTitle :one

INSERT INTO titles
    (path_id, kind, title)
    VALUES ($1, 0, $2)
    RETURNING id
`

type InsertTitleParams struct {
	PathID int32  `json:"path_id"`
	Title  string `json:"title"`
}

// INSERT INTO tag ("key", "value")
// SELECT 'key1', 'value1'
// WHERE NOT EXISTS (
//
//	SELECT id, "key", "value"
//	FROM node_tag
//	WHERE key = 'key1' AND value = 'value1'
//	)
//
// returning id, "key", "value"
func (q *Queries) InsertTitle(ctx context.Context, arg InsertTitleParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertTitle, arg.PathID, arg.Title)
	var id int64
	err := row.Scan(&id)
	return id, err
}
